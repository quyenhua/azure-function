# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: "Infrastructure, build and deploy"

on:
  push:
    branches: ["master"]
  pull_request:

permissions:
  id-token: write
  contents: read

env:
  AZURE_FUNCTIONAPP_NAME: api-dev-function-app
  AZURE_FUNCTIONAPP_PACKAGE_PATH: src/AzureFunction/published
  CONFIGURATION: Release
  DOTNET_VERSION: 8.0.x
  WORKING_DIRECTORY: src/AzureFunction
  STORAGE_ACCOUNT: ${{ vars.AZ_STORAGE_ACCOUNT }}
  CONTAINER_NAME: ${{ vars.AZ_CONTAINER_NAME }}
  RESOURCE_GROUP: ${{ vars.AZ_RESOURCE_GROUP }}
  TF_VARS: ${{ vars.TF_VARS }}
  TF_VAR_AGENT_CLIENT_ID: ${{ secrets.TF_VAR_AGENT_CLIENT_ID }}
  TF_VAR_AGENT_CLIENT_SECRET: ${{ secrets.TF_VAR_AGENT_CLIENT_SECRET }}
  TF_VAR_SUBSCRIPTION_ID: ${{ secrets.TF_VAR_SUBSCRIPTION_ID }}
  TF_VAR_TENANT_ID: ${{ secrets.TF_VAR_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: "Terraform Format"
        id: fmt
        run: terraform fmt

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ./terraform
        id: init
        run: |
          terraform init --migrate-state \
          --backend-config="subscription_id=$TF_VAR_SUBSCRIPTION_ID" \
          --backend-config="tenant_id=$ARM_TENANT_ID" \
          --backend-config="client_id=$ARM_CLIENT_ID" \
          --backend-config="client_secret=$ARM_CLIENT_SECRET" \
          --backend-config="storage_account_name=$STORAGE_ACCOUNT" \
          --backend-config="container_name=$CONTAINER_NAME" \
          --backend-config="resource_group_name=$RESOURCE_GROUP" \
          --backend-config="key=$TF_VARS"

      - name: Terraform Validate
        working-directory: ./terraform
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: ./terraform
        id: plan
        run: terraform plan --var-file=${{ env.TF_VARS }}

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -input=false

  build:
    name: "Build"
    runs-on: ubuntu-latest
    needs:
      - terraform
    steps:
      - uses: actions/checkout@v4

      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v3
        with:
          include-prerelease: True
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore
        run: dotnet restore "${{ env.WORKING_DIRECTORY }}"

      - name: Build
        run: dotnet build "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Publish
        run: dotnet publish "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"

      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: functionapp
          path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

  # deploy:
  #   name: "Deploy"
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build
  #   steps:
  #     - name: Download artifact from build job
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: functionapp
  #         path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

  #     - name: "Login via Azure CLI"
  #       run: az login --service-principal --tenant ${{ env.TF_VAR_TENANT_ID }} --username ${{ env.TF_VAR_AGENT_CLIENT_ID }} --password ${{ env.TF_VAR_AGENT_CLIENT_SECRET }}

  #     - name: Deploy to Azure Function App
  #       uses: Azure/functions-action@v1
  #       with:
  #         app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
  #         publish-profile: ${{ secrets.API_DEV_FUNCTION_APP_DFB2 }}
  #         package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
